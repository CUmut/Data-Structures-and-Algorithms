An array declaration has two components: the type and the name. type declares the element type of the array.
The element type determines the data type of each element that comprises the array.
Like an array of integers, we can also create an array of other primitive data types like char, float, double, etc. or user-defined data types (objects of a class).
Thus, the element type for the array determines what type of data the array will hold.

------------TR----------------

Bir dizi bildiriminin iki bileşeni vardır: tür ve ad. tür, dizinin öğe türünü bildirir.
Öğe türü, diziyi oluşturan her öğenin veri türünü belirler.
Bir tamsayı dizisi gibi, char, float, double, vb. Veya kullanıcı tanımlı veri türleri (bir sınıfın nesneleri) gibi diğer ilkel veri türlerinden bir dizi oluşturabiliriz.
Böylece, dizinin öğe türü, dizinin ne tür verileri tutacağını belirler.


// both are valid declarations
int intArray[];
or
int[] intArray;

byte byteArray[];
short shortsArray[];
boolean booleanArray[];
long longArray[];
float floatArray[];
double doubleArray[];
char charArray[];

// an array of references to objects of
// the class MyClass (a class created by
// user)
MyClass myClassArray[];

Object[] ao;   // array of Object

Collection[] ca;  // array of Collection
                     // of unknown type


Although the first declaration above establishes the fact that intArray is an array variable, no actual array exists.
It merely tells the compiler that this variable (intArray) will hold an array of the integer type.
To link intArray with an actual, physical array of integers, you must allocate one using new and assign it to intArray.

------------TR----------------

Yukarıdaki ilk bildirim, intArray'in bir dizi değişkeni olduğu gerçeğini ortaya koysa da, gerçek bir dizi yoktur.
Yalnızca derleyiciye bu değişkenin (intArray) tamsayı türünde bir dizi tutacağını söyler.
İntArray'i gerçek, fiziksel bir tamsayı dizisi ile bağlamak için, new kullanarak bir tane ayırmalı ve bunu intArray'e atamalısınız.

Instantiating an Array in Java

When an array is declared, only a reference of array is created.
To actually create or give memory to array, you create an array like this:The general form of new as it applies to one-dimensional arrays appears as follows:
------------TR----------------
Bir dizi bildirildiğinde, yalnızca bir dizi başvurusu oluşturulur. Diziyi gerçekten oluşturmak veya diziye bellek vermek için, şöyle bir dizi yaratırsınız:
Tek boyutlu dizilere uygulandığı haliyle yeninin genel biçimi aşağıdaki gibi görünür:

var-name  = new type[size];

Here, type specifies the type of data being allocated, size specifies the number of elements in the array, and var-name is the name of array variable that is linked to the array.
That is, to use new to allocate an array, you must specify the type and number of elements to allocate.

int intArray[]; //declaring array
intArray = new int[20];  // allocating memory to array

OR

int[] intArray = new int[20]; // combining both statements in one

NOTE :
1) Default Value Types Java
    boolean : false
    int : 0
    double : 0.0
    String : null
    User Defined Type : null

2) Obtaining an array is a two-step process. First, you must declare a variable of the desired array type.
Second, you must allocate the memory that will hold the array, using new, and assign it to the array variable.
Thus, in Java all arrays are dynamically allocated.

------------TR----------------
Bir dizi elde etmek iki aşamalı bir işlemdir.
İlk olarak, istenen dizi türünde bir değişken tanımlamalısınız.
İkinci olarak, new anahtar sözcüğü kullanarak diziyi tutacak belleği ayırmalı ve onu dizi değişkenine atamalısınız.
Böylece, Java'da tüm diziler dinamik olarak tahsis edilir.


                                        Array Literal

In a situation, where the size of the array and variables of array are already known, array literals can be used.

int[] intArray = new int[]{1,2,3,4,5,6,7,8,9,10};
// Declaring array literal

The length of this array determines the length of the created array.
There is no need to write the new int[] part in the latest versions of Java
------------TR----------------
Bu dizinin uzunluğu, oluşturulan dizinin uzunluğunu belirler.
Java'nın son sürümlerinde yeni int [] bölümünü yazmaya gerek yoktur.

                            Accessing Java Array Elements using for Loop

Each element in the array is accessed via its index.
The index begins with 0 and ends at (total array size)-1.
All the elements of array can be accessed using Java for Loop.

------------TR----------------

Dizideki her öğeye dizini aracılığıyla erişilir. Dizin 0 ile başlar ve (toplam dizi boyutu) -1 ile biter.
Dizinin tüm öğelerine Java for Loop kullanılarak erişilebilir.

for(int i = 0; i < arr.length; i++)
    System.out.println("Element at index " + i +
                                    " : "+ arr[i]);